Craig talks about how validation is done
- A large aim I had with the organization of the scripts was to follow the single responsibility principle which states that modules and scripts should have responsibility over a single part of functionality, therefore scripts only need to be modified for reasons specific to their functionality and their internal functions/methods are highly cohesive.
- We currently have 5 scripts covering aspects of the system, not involved in validation is a script in charge of keeping the two databases (both primary and secondary) appropriately updated
- Our launcher script is in charge of running the reader and passing the information for them along with a link to the database to a validator script which runs the card reader and then the fingerprint reader so the user taps their card before passing their biometric information.
- Our Card reader script is based on open source documentation for working with the card reader and the Fingerprint reader is also based on data from an open source library
- The reader scripts are in charge of interacting with the user, and passing information to the aforementioned launcher script

Both readers pass the relevant information to the main program
From there we have a script that compares the information passed to a JSON file.
(We follow the JSON formatting as we originally used to only have the data in a database, the reason we’re not using the data in the database is in case we’re not connected to the internet but to still stay consistent)
In the file, there are 3 fields for each user -  card info, biometric info, and authority level
Due to how the database is setup (The database is setup so the card id acts like a primary key) the validator first checks the database to see if such a card id is in the system, then it compares the passed fingerprint to the appropriate one in the database. 
At this stage, we also check the authority level. 
The script also handles the case when the card id is not found in the database
The reason why we have the card id as a primary key is in the event that one wanted to add more biometric checks to the system, so the system can, therefore, evolve to have more than 2 factors or one can easily swap which biometric information to check users against


Benefits
- By using biometric checks instead of a password we remove the need to have to enforce password rules that users may or may not follow to create appropriate but easy to forget passwords and unlike passwords which could be leaked, the way our database is setup, the fingerprint and card information are setup as integers so leaked, it would be difficult to pinpoint identity of users. Even if a user was to somehow figure out identity of another, it would be a complicated process to steal the user’s fingerprints. 
- In case for some reason, it’s determined that fingerprints are not as secure as hoped, one can easily add different forms of biometric info in the database and due to the scripts being loosely coupled one would just have to run the appropriate biometric reader script and then pass its info to the launcher script
- We choose to lock out the card rather than keep a list of users who should be denied at a specific entry point. By doing this we cancel the possibility of brute force entry where a user may want to keep trying at various doors till s/he finds one that works

The fingerprint and authority check also removes the possibility of brute force entry through the use of a stolen card. Also in regards to brute force entry, it is the card itself that is locked out rather than just one entry point, and this process is not explicitly shown to the user. This also wards off users from trying to get into places above their security clearance as it would force them to have to go through a recovery system
Due to way the enrollment process is set up, one has to physically be present to be registered therefore every card and fingerprint pairing will always be unique